Nurym Kudaibergen, ID: 404 648 263

Exercise 1.1

2) C-n M-f
3) C-s L a M-b
4) C-s s e l f M-b
5) C-s a r r o w M-b
6) C-e
7) C-a
8-9) I didn't use arrow keys to move the cursor, and tried to maximize Emacs
command usage.
10) C-x C-c

Exercise 1.2

2) M-g M-g 1 8 Enter C-k C-k
3) C-s D E C-a C-k C-k
4) C-s < ! C-u M-;
5) C-s < ! C-u M-; C-s < ! C-u M-;

Exercise 1.3

2) M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 37 Enter SP SP
Enter
3) M-< M-% U T F - 8 Enter U S - A S C I I Enter SP Enter
4) M-< C-s < / o l C-a C-m

Exercise 1.4

1) c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
Enter
3-4)
M-> UP RIGHT C-k M-g M-g 3 4 9 Enter C-y Enter
M-> C-r < p C-r C-k M-g M-g 3 4 4 Enter C-k C-y M-y
M-> C-r < ! C-u M-; M-g M-g 3 0 0 Enter C-y Enter UP C-d UP C-d
M-> C-r < ! C-k M-g M-g 9 2 Enter C-y Enter
M-> C-r < ! C-k M-g M-g 1 8 Enter C-y Enter
5) C-s H T M L SP r C-e M-> C-w
6) C-x u
7) M-x c o m m - r Enter
8) M-x c o u TAB m TAB Enter < o l > Enter
(found 7 occurrences)
M-% < o l > Enter < O l > Enter !

Exercise 1.5

1-2) C-x C-f C-a C-k ~ / j u n k / h e l l o . c Enter C-x C-s y
3) M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c Enter
4) C-x b h e l l o - o u t Enter C-u M-! . / a . o u t Enter
5) M-> M-w C-x b k e y 1 . t x t Enter M-> C-y

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6

1) C-x b Enter
2) ( r a n d o m ) C-j
3) ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) )
C-j
4) ( * SP x SP y ) C-j
Even though x was negative and y was positive, the product was still positive.
Multiplication seems to wrap around on overflow.
5) M-: ( * SP  x SP y ) Enter
We get the same result, although there are also integers prefixed with #o and
#x, which stand for octal and hexadecimal representations respectively.
6) Random number generator are not called pseudo-random for no reason. They
tend save an internal state and algorithmically calculate the next random
number based on the seed, which isn't random, but good enough in practice.
Also, lisp is bound by most-positive-fixnum and most-negative-fixnum,
which severely shrinks the range of possible generable numbers.
7) We can calculate the probability by looking at the range of possible
products and allowed integers. Mathematically correct products can only be in
the range A = [-2^61, 2^61 - 1], while the possible maximum and minimum
products are in the range B = [-2^61 * (2^61 - 1), -2^61 * -2^61] =
[-2^122 + 2^61, 2^122]. The possible number of numbers in A is 2^61 - 1 + 2^61
= 2^62 - 1. The possible number of numbers in B is 2^122 + 2^122 - 2^61 = 2^123
- 2^61. If we divide the numbers in range A by the numbers in range in B, we
get the probability of mathematically correct answers. To get the probability
of mathematically incorrect answers, we must negate one from it: 1 - ((2^62 -
1)/(2^123 - 2^61)).
